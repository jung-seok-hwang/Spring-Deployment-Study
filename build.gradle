plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.2'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.3'
}

description = 'spring-deployment-study'
group = 'cloud'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.projectreactor:reactor-core:3.6.7'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'io.projectreactor:reactor-test:3.6.8'

    //Test Code Slf4j 설정
    testCompileOnly 'org.projectlombok:lombok'
    testAnnotationProcessor 'org.projectlombok:lombok'
}

test{
    useJUnitPlatform()
}
/**
    src/test/java/unit: 단위 테스트(Unit Test) 코드를 위한 디렉토리
    src/test/java/intg: 통합 테스트(Integration Test) 코드를 위한 디렉토리
 **/
sourceSets {
    test {
        java.srcDirs = ['src/test/java/unit' ,
                        'src/test/java/intg']
    }
}

java.sourceCompatibility = JavaVersion.VERSION_17

jar {
    enabled = false
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}


jib {
    from {
        image = 'openjdk:17.0.2-slim'
    }
    to {
        image = 'hwangjungseok/study-deployment'
        tags = ['1.0']
    }
    container {
        entrypoint = ['java', '-Dspring.profiles.active=test', '-jar', 'spring-deployment-study-0.0.1-SNAPSHOT.jar']

        jvmFlags = ['-Xms512m', '-Xmx512m', '-Xdebug', '-XshowSettings:vm', '-XX:+UnlockExperimentalVMOptions', '-XX:+UseContainerSupport']
        ports = ['8080']

        environment = [SPRING_OUTPUT_ANSI_ENABLED: "ALWAYS"]
        labels = [version:project.version, name:project.name, group:project.group]

        creationTime = 'USE_CURRENT_TIMESTAMP'
        format = 'Docker'
    }
    extraDirectories {
        paths {
            path {
                from = file('build/libs')
            }
        }
    }
}
